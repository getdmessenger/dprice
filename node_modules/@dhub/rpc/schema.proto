syntax = "proto2";

package dhub;
import "dwrpc.proto";

// General Structs
message Peer {
  required bytes remotePublicKey = 1;
  required string remoteAddress = 2;
  required string type = 3;
}

// DHub Methods
message DHubStatusResponse {
  required string apiVersion = 1;
  optional bool holepunchable = 2;
  optional string remoteAddress = 3;
  optional string version = 4;
}

// Basestore Methods

message OpenRequest {
  required uint32 id = 1;
  optional bytes key = 2;
  optional string name = 3;
  optional bool weak = 4;
}

message OpenResponse {
  required bytes key = 1;
  required uint64 length = 2;
  required uint64 byteLength = 3;
  required bool writable = 4;
  repeated Peer peers = 5;
  optional bytes discoveryKey = 6;
}

// Basestore Events

message FeedEvent {
  required bytes key = 1;
}

// Networking Methods

message OpenNetworkResponse {
  required bytes publicKey = 1;
  repeated Peer peers = 2;
}

message NetworkStatus {
  required bytes discoveryKey = 1;
  optional bool announce = 2;
  optional bool lookup = 3;
  optional bool remember = 4;
}

message ConfigureNetworkRequest {
  required NetworkStatus configuration = 1;
  optional bool flush = 2;
  optional bytes copyFrom = 3;
  optional bool overwrite = 4 [default = true];
}

message NetworkStatusRequest {
  required bytes discoveryKey = 1;
}

message NetworkStatusResponse {
  optional NetworkStatus status = 1;
}

message AllNetworkStatusesResponse {
  repeated NetworkStatus statuses = 1;
}

message RegisterNetworkExtensionRequest {
  required uint64 resourceId = 1;
  required string name = 2;
}

message NetworkExtensionMessage {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional bytes remotePublicKey = 3;
  required bytes data = 4;
}

// DDatabase Methods

message CloseRequest {
  required uint32 id = 1;
}

message GetRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
  required uint64 resourceId = 3;
  optional bool wait = 4 [default = true];
  optional bool ifAvailable = 5 [default = true];
  optional uint64 onWaitId = 6;
}
message GetResponse {
  optional bytes block = 1;
}

message AppendRequest {
  required uint32 id = 1;
  repeated bytes blocks = 2;
}
message AppendResponse {
  required uint64 length = 1;
  required uint64 byteLength = 2;
  required uint64 seq = 3;
}

message UpdateRequest {
  required uint32 id = 1;
  optional uint64 minLength = 2;
  optional bool ifAvailable = 3 [default = true];
  optional bool hash = 4 [default = true];
}

message SeekRequest {
  required uint32 id = 1;
  required uint64 byteOffset = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  optional bool wait = 5 [default = true];
  optional bool ifAvailable = 6 [default = true];
}
message SeekResponse {
  required uint64 seq = 1;
  required uint64 blockOffset = 2;
}

message HasRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
}
message HasResponse {
  required bool has = 1;
}

message CancelRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message DownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  repeated uint64 blocks = 5;
  optional bool linear = 6;
  optional bool live = 7; // ie no end (end = -1 in the ddatabse api)
}

message DownloadedRequest {
  required uint64 id = 1;
  optional uint64 start = 2;
  optional uint64 end = 3;
}

message DownloadedResponse {
  required uint64 bytes = 1;
}

message UndownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message LockRequest {
  required uint64 id = 1;
}

message WatchDownloadsRequest {
  required uint64 id = 1;
}

message UnwatchDownloadsRequest {
  required uint64 id = 1;
}

message WatchUploadsRequest {
  required uint64 id = 1;
}

message UnwatchUploadsRequest {
  required uint64 id = 1;
}

// DDatabase Events

message AppendEvent {
  required uint64 id = 1;
  required uint64 length = 2;
  required uint64 byteLength = 3;
}

message PeerEvent {
  required uint64 id = 1;
  required Peer peer = 2;
}

message CloseEvent {
  required uint64 id = 1;
}

message WaitEvent {
  required uint64 id = 1;
  required uint64 onWaitId = 2;
  required uint64 seq = 3;
}

message DownloadEvent {
  required uint64 id = 1;
  required uint64 seq = 2;
  optional uint64 byteLength = 3;
}

message UploadEvent {
  required uint64 id = 1;
  required uint64 seq = 2;
  required uint64 byteLength = 3;
}

// Extension Methods

message RegisterExtensionRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  required string name = 3;
}

message UnregisterExtensionRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message ExtensionMessage {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional bytes remotePublicKey = 3;
  required bytes data = 4;
}

service DHub {
  option (dwrpc.service) = 1;

  // Methods
  rpc Status (dwrpc.Void) returns (DHubStatusResponse) { option (dwrpc.method) = 1; }
  rpc Stop (dwrpc.Void) returns (dwrpc.Void) { option (dwrpc.method) = 2; }
}

service Basestore {
  option (dwrpc.service) = 2;

   // Methods
  rpc Open (OpenRequest) returns (OpenResponse) { option (dwrpc.method) = 1; }

  // Events
  rpc OnFeed (FeedEvent) returns (dwrpc.Void)  { option (dwrpc.method) = 2; }
}

service DDatabase {
  option (dwrpc.service) = 3;

   // Methods
  rpc Get (GetRequest) returns (GetResponse) { option (dwrpc.method) = 1; }
  rpc Append (AppendRequest) returns (AppendResponse) { option (dwrpc.method) = 2; }
  rpc Update (UpdateRequest) returns (dwrpc.Void) { option (dwrpc.method) = 3; }
  rpc Seek (SeekRequest) returns (SeekResponse) { option (dwrpc.method) = 4; }
  rpc Has (HasRequest) returns (HasResponse) { option (dwrpc.method) = 5; }
  rpc Cancel (CancelRequest) returns (dwrpc.Void) { option (dwrpc.method) = 6; }
  rpc Download (DownloadRequest) returns (dwrpc.Void) { option (dwrpc.method) = 7; }
  rpc Downloaded (DownloadedRequest) returns (DownloadedResponse) { option (dwrpc.method) = 8; }
  rpc Undownload (UndownloadRequest) returns (dwrpc.Void) { option (dwrpc.method) = 9; }
  rpc Close (CloseRequest) returns (dwrpc.Void) { option (dwrpc.method) = 10; }
  rpc RegisterExtension (RegisterExtensionRequest) returns (dwrpc.Void) { option (dwrpc.method) = 11; }
  rpc UnregisterExtension (UnregisterExtensionRequest) returns (dwrpc.Void) { option (dwrpc.method) = 12; }
  rpc SendExtension (ExtensionMessage) returns (dwrpc.Void) { option (dwrpc.method) = 13; }

  rpc AcquireLock (LockRequest) returns (dwrpc.Void) { option (dwrpc.method) = 14; }
  rpc ReleaseLock (LockRequest) returns (dwrpc.Void) { option (dwrpc.method) = 15; }

  // Events
  rpc OnAppend (AppendEvent) returns (dwrpc.Void) { option (dwrpc.method) = 16; }
  rpc OnClose (CloseEvent) returns (dwrpc.Void) { option (dwrpc.method) = 17; }
  rpc OnPeerOpen (PeerEvent) returns (dwrpc.Void) { option (dwrpc.method) = 18; }
  rpc OnPeerRemove (PeerEvent) returns (dwrpc.Void) { option (dwrpc.method) = 19; }
  rpc OnExtension (ExtensionMessage) returns (dwrpc.Void) { option (dwrpc.method) = 20; }
  rpc OnWait (WaitEvent) returns (dwrpc.Void) { option (dwrpc.method) = 21; }

  // Downloads
  rpc WatchDownloads (WatchDownloadsRequest) returns (dwrpc.Void) { option (dwrpc.method) = 22;  }
  rpc UnwatchDownloads (UnwatchDownloadsRequest) returns (dwrpc.Void) { option (dwrpc.method) = 23;  }
  rpc OnDownload (DownloadEvent) returns (dwrpc.Void) { option (dwrpc.method) = 24; }

  // Uploads
  rpc WatchUploads (WatchUploadsRequest) returns (dwrpc.Void) { option (dwrpc.method) = 25;  }
  rpc UnwatchUploads (UnwatchUploadsRequest) returns (dwrpc.Void) { option (dwrpc.method) = 26;  }
  rpc OnUpload (UploadEvent) returns (dwrpc.Void) { option (dwrpc.method) = 27; }
}

service Network {
  option (dwrpc.service) = 4;

   // Methods
  rpc Open (dwrpc.Void) returns (OpenNetworkResponse) { option (dwrpc.method) = 1; }
  rpc Configure (ConfigureNetworkRequest) returns (NetworkStatusResponse) { option (dwrpc.method) = 2; }
  rpc Status (NetworkStatusRequest) returns (NetworkStatusResponse) { option (dwrpc.method) = 3; }
  rpc AllStatuses (dwrpc.Void) returns (AllNetworkStatusesResponse) { option (dwrpc.method) = 4; }
  rpc RegisterExtension (RegisterExtensionRequest) returns (dwrpc.Void) { option (dwrpc.method) = 5; }
  rpc UnregisterExtension (UnregisterExtensionRequest) returns (dwrpc.Void) { option (dwrpc.method) = 6; }
  rpc SendExtension (ExtensionMessage) returns (dwrpc.Void) { option (dwrpc.method) = 7; }

  // Events
  rpc OnPeerAdd (PeerEvent) returns (dwrpc.Void) { option (dwrpc.method) = 8; }
  rpc OnPeerRemove (PeerEvent) returns (dwrpc.Void) { option (dwrpc.method) = 9; }
  rpc OnExtension (ExtensionMessage) returns (dwrpc.Void) { option (dwrpc.method) = 10; }
}
